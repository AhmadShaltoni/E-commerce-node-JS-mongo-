Day 78 - Project Initialization and Planning

- تم إنشاء المشروع باستخدام: npm init -y
- من خلال الدورة، تم استخدام بنية MVC
- الفولدرات الأساسية:
  - controllers
  - models
  - views
  - routes
- صفحات views المشتركة (admin + customer):
  - Signup
  - Login
- صفحات خاصة بـ admin:
  - Dashboard
  - All Products
  - New Product
  - Update Product
  - All Orders
- صفحات خاصة بـ customer:
  - All Products
  - Product Details
  - Shopping Cart
  - Customer Orders
- تصميم models:
  - User:
    - email, password, name, address, isAdmin
  - Product:
    - name, summary, price, image, description
  - Cart:
    - items, totalPrice, numberOfItems
  - Order:
    - userData, products or cart, date, status

    * بعد هيك قمنا بتثبيت مكتبات بنحتاجها مثل
-  express ، nodemon (لتحديث السيرفر تلقائيًا في وضع التطوير)



- في app.js:
  - استدعاء express
  - إنشاء app باستخدام express()
  - تشغيل السيرفر على البورت 3000 باستخدام app.listen

- داخل routes:
  - إنشاء ملف: auth.route.js
  - يحتوي على الراوتات الخاصة بـ signup و login
  - لكل راوت (get أو post)، يتم تحديد اسم دالة فقط

- داخل controllers:
  - إنشاء ملف: auth.controller.js
  - يحتوي على الدوال الفعلية الخاصة بـ signup و login
  - يتم تمرير أسماء هذه الدوال من الراوتس



======================== Day 79 =================


- تم تثبيت EJS باستخدام: npm i ejs

- داخل app.js:
  - const express = require('express')
  - const path = require('path')
  - const authRouter = require('./routes/auth.routes')
  - const app = express()
  - تعيين EJS كمحرك عرض: app.set('view engine', 'ejs')
  - تحديد مسار مجلد views: app.set('views', path.join(__dirname, 'views'))
  - استخدام الراوتر: app.use(authRouter)
  - تشغيل السيرفر على بورت 3000: app.listen(3000)
  -app.use(express.static('public')) تعريف السيرفر على ملف الستايل 


- داخل مجلد views:
  - إنشاء مجلد باسم auth
  - إضافة الصفحات:
    - login.ejs
    - signup.ejs

- داخل views/customer:
  - إنشاء مجلد باسم includes
  - إضافة ملفات مشتركة:
    - head.ejs
    - header.ejs

- إنشاء مجلد باسم public
  - إضافة ملفات CSS داخله

- في ملفات الستايل:
  - تم ربط Google Fonts داخل head.ejs
  - تعريف ستايل أساسي يتم تطبيقه على كل الصفحات من خلال ملف رئيسي

- في CSS:
  - استخدام المتغيرات (CSS Variables)
  - تعريف متغيرات للألوان، المساحات (spacing)، والـ shadow



======================== Day 80 =================


- داخل مجلد public:
  - إضافة ملف CSS جديد باسم base.css
  - استخدامه لتنسيق العناصر العامة في المشروع

- التنسيقات اللي أضفناها:

  main {
      width: 90%;
      max-width: 50rem;
      margin: auto;
  }

  ul, ol {
      list-style: none;
      margin: 0;
      padding: 0;
  }

  a {
      text-decoration: none;
      color: var(--color-primary-400);
  }

  .btn {
      cursor: pointer;
      font: inherit;
      padding: var(--space-2) var(--space-6);
      background-color: var(--color-primary-500);
      color: var(--color-primary-200-contrast);
      border: 1px solid var(--color-primary-500);
      border-radius: var(--border-radius-small);
  }

  .btn:hover,
  .btn:active {
      background-color: var(--color-primary-700);
      border-color: var(--color-primary-700);
  }

------------------

- تم إضافة تنسيقات خاصة بعناصر الفورم:

  form hr {
      border-color: var(--color-primary-200);
      margin: var(--space-4);
  }

  label {
      display: block;
      margin-bottom: var(--space-2);
      color: var(--color-gray-100);
  }

  input, textarea {
      font: inherit;
      width: 90%;
      padding: var(--space-2);
      border-radius: var(--border-radius-small);
      border: none;
      background-color: var(--color-gray-500);
      color: var(--color-gray-100);
  }

----------------


- داخل auth.controller.js:
  - إضافة دالة جديدة: signupPost (تعالج POST request الخاصة بـ signup)

- داخل auth.routes.js:
  - إضافة route من نوع POST لصفحة signup
  - تمرير الدالة signupPost من الكنترولر

- إعداد قاعدة البيانات:
  - تثبيت MongoDB: npm i mongodb
  - إنشاء مجلد باسم data
  - داخل data: إنشاء ملف database.js

- محتوى ملف database.js:

  const mongodb = require('mongodb');
  const MongoClient = mongodb.MongoClient;
  let database;

  async function connectToDatabase() {
      const client = await MongoClient.connect('mongodb://localhost:27017');
      database = client.db('online-shop');
  }

  function getDb() {
      if (!database) {
          throw new Error('Database not initialized. Call connectToDatabase first.');
      }
      return database;
  }

  module.exports = {
      connectToDatabase,
      getDb
  };

- داخل app.js:
  - استدعاء ملف قاعدة البيانات:
    const db = require('./data/database')

  - التأكد من الاتصال بقاعدة البيانات قبل تشغيل السيرفر:

    db.connectToDatabase()
        .then(() => {
            app.listen(3000, () => {
                console.log('Server is running on port 3000');
            });
        })
        .catch(err => {
            console.error('Failed to connect to the database:', err);
        });

        ======================== Day 81 =================


          - داخل app.js:
            - إضافة middleware لمعالجة بيانات الفورم:
              app.use(express.urlencoded({ extended: false }));

          - داخل auth.controller.js:
            - إنشاء دالة signup للتعامل مع POST بيانات التسجيل
            - استلام بيانات: email, password, fullname, street, city, postal من req.body
            - إنشاء كائن User جديد وتمرير البيانات له
            - استدعاء دالة signup من كلاس User لحفظ المستخدم في قاعدة البيانات
            - إعادة التوجيه لصفحة تسجيل الدخول بعد التسجيل
            - إنشاء دالة getLogin لعرض صفحة تسجيل الدخول

          - إنشاء ملف user.model.js:
            - تعريف كلاس User مع خصائص: email, password, fullname, address (street, city, postalCode)
            - دالة signup داخل الكلاس تقوم بتشفير كلمة المرور باستخدام bcrypt
            - حفظ بيانات المستخدم في مجموعة 'users' داخل MongoDB


-------------

- إضافة مكتبة الحماية CSRF:
  npm i csurf

- إنشاء مجلد middlewares
- داخل middlewares، إنشاء ملف csrf-token.js يحتوي على:

  function addCsrfToken(req, res, next) {
      res.locals.csrfToken = req.csrfToken();
      next();
  }

  module.exports = addCsrfToken;

- استخدام middleware لإرسال قيمة CSRF token للعرض في القوالب
- إضافة حقول الـ CSRF في نماذج التسجيل وتسجيل الدخول لضمان حماية الريكوست من هجمات التزوير

---------------------


- إنشاء صفحة خاصة لعرض أخطاء السيرفر (500 error):
  - مسار الملف: views/shared/500.ejs
  - تحتوي على رسالة: "Something went wrong" + رابط للصفحة الرئيسية

- إنشاء ملف جديد في middlewares باسم error-handler.js يحتوي على:

  function handleError(err, req, res, next) {
      console.error('Error occurred:', err);
      res.status(500).render('shared/500');
  }

  module.exports = handleError;

- الهدف: عرض صفحة مفيدة للمستخدم عند حدوث خطأ غير متوقع بدلاً من كود الخطأ الخام


--------------

- أضفنا دعم الجلسات (Sessions) والكوكيز لأن مكتبة CSRF تعتمد عليهم.
- قمنا بتثبيت البكجات:
  npm i express-session connect-mongodb-session

- أنشأنا ملف جديد: config/session.js
  يحتوي على:
  - createSessionStore: لإنشاء store من نوع MongoDB لتخزين الجلسات.
  - createSessionConfig: إعدادات السيشن (السر، زمن الانتهاء، store).

  مثال:
  {
    secret: 'super-secret',
    resave: false,
    saveUninitialized: false,
    store: MongoDBStore,
    cookie: { maxAge: يومين }
  }

- في ملف app.js:
  - استوردنا createSessionConfig
  - مررنا الناتج إلى express-session:

  ```js
  const sessionConfig = createSessionConfig();
  app.use(expressSession(sessionConfig));




        ======================== Day 81 =================
