Day 78 - Project Initialization and Planning

- تم إنشاء المشروع باستخدام: npm init -y
- من خلال الدورة، تم استخدام بنية MVC
- الفولدرات الأساسية:
  - controllers
  - models
  - views
  - routes
- صفحات views المشتركة (admin + customer):
  - Signup
  - Login
- صفحات خاصة بـ admin:
  - Dashboard
  - All Products
  - New Product
  - Update Product
  - All Orders
- صفحات خاصة بـ customer:
  - All Products
  - Product Details
  - Shopping Cart
  - Customer Orders
- تصميم models:
  - User:
    - email, password, name, address, isAdmin
  - Product:
    - name, summary, price, image, description
  - Cart:
    - items, totalPrice, numberOfItems
  - Order:
    - userData, products or cart, date, status

    * بعد هيك قمنا بتثبيت مكتبات بنحتاجها مثل
-  express ، nodemon (لتحديث السيرفر تلقائيًا في وضع التطوير)



- في app.js:
  - استدعاء express
  - إنشاء app باستخدام express()
  - تشغيل السيرفر على البورت 3000 باستخدام app.listen

- داخل routes:
  - إنشاء ملف: auth.route.js
  - يحتوي على الراوتات الخاصة بـ signup و login
  - لكل راوت (get أو post)، يتم تحديد اسم دالة فقط

- داخل controllers:
  - إنشاء ملف: auth.controller.js
  - يحتوي على الدوال الفعلية الخاصة بـ signup و login
  - يتم تمرير أسماء هذه الدوال من الراوتس



======================== Day 79 =================


- تم تثبيت EJS باستخدام: npm i ejs

- داخل app.js:
  - const express = require('express')
  - const path = require('path')
  - const authRouter = require('./routes/auth.routes')
  - const app = express()
  - تعيين EJS كمحرك عرض: app.set('view engine', 'ejs')
  - تحديد مسار مجلد views: app.set('views', path.join(__dirname, 'views'))
  - استخدام الراوتر: app.use(authRouter)
  - تشغيل السيرفر على بورت 3000: app.listen(3000)
  -app.use(express.static('public')) تعريف السيرفر على ملف الستايل 


- داخل مجلد views:
  - إنشاء مجلد باسم auth
  - إضافة الصفحات:
    - login.ejs
    - signup.ejs

- داخل views/customer:
  - إنشاء مجلد باسم includes
  - إضافة ملفات مشتركة:
    - head.ejs
    - header.ejs

- إنشاء مجلد باسم public
  - إضافة ملفات CSS داخله

- في ملفات الستايل:
  - تم ربط Google Fonts داخل head.ejs
  - تعريف ستايل أساسي يتم تطبيقه على كل الصفحات من خلال ملف رئيسي

- في CSS:
  - استخدام المتغيرات (CSS Variables)
  - تعريف متغيرات للألوان، المساحات (spacing)، والـ shadow



======================== Day 80 =================


- داخل مجلد public:
  - إضافة ملف CSS جديد باسم base.css
  - استخدامه لتنسيق العناصر العامة في المشروع

- التنسيقات اللي أضفناها:

  main {
      width: 90%;
      max-width: 50rem;
      margin: auto;
  }

  ul, ol {
      list-style: none;
      margin: 0;
      padding: 0;
  }

  a {
      text-decoration: none;
      color: var(--color-primary-400);
  }

  .btn {
      cursor: pointer;
      font: inherit;
      padding: var(--space-2) var(--space-6);
      background-color: var(--color-primary-500);
      color: var(--color-primary-200-contrast);
      border: 1px solid var(--color-primary-500);
      border-radius: var(--border-radius-small);
  }

  .btn:hover,
  .btn:active {
      background-color: var(--color-primary-700);
      border-color: var(--color-primary-700);
  }

------------------

- تم إضافة تنسيقات خاصة بعناصر الفورم:

  form hr {
      border-color: var(--color-primary-200);
      margin: var(--space-4);
  }

  label {
      display: block;
      margin-bottom: var(--space-2);
      color: var(--color-gray-100);
  }

  input, textarea {
      font: inherit;
      width: 90%;
      padding: var(--space-2);
      border-radius: var(--border-radius-small);
      border: none;
      background-color: var(--color-gray-500);
      color: var(--color-gray-100);
  }

----------------


- داخل auth.controller.js:
  - إضافة دالة جديدة: signupPost (تعالج POST request الخاصة بـ signup)

- داخل auth.routes.js:
  - إضافة route من نوع POST لصفحة signup
  - تمرير الدالة signupPost من الكنترولر

- إعداد قاعدة البيانات:
  - تثبيت MongoDB: npm i mongodb
  - إنشاء مجلد باسم data
  - داخل data: إنشاء ملف database.js

- محتوى ملف database.js:

  const mongodb = require('mongodb');
  const MongoClient = mongodb.MongoClient;
  let database;

  async function connectToDatabase() {
      const client = await MongoClient.connect('mongodb://localhost:27017');
      database = client.db('online-shop');
  }

  function getDb() {
      if (!database) {
          throw new Error('Database not initialized. Call connectToDatabase first.');
      }
      return database;
  }

  module.exports = {
      connectToDatabase,
      getDb
  };

- داخل app.js:
  - استدعاء ملف قاعدة البيانات:
    const db = require('./data/database')

  - التأكد من الاتصال بقاعدة البيانات قبل تشغيل السيرفر:

    db.connectToDatabase()
        .then(() => {
            app.listen(3000, () => {
                console.log('Server is running on port 3000');
            });
        })
        .catch(err => {
            console.error('Failed to connect to the database:', err);
        });

        ======================== Day 81 =================


          - داخل app.js:
            - إضافة middleware لمعالجة بيانات الفورم:
              app.use(express.urlencoded({ extended: false }));

          - داخل auth.controller.js:
            - إنشاء دالة signup للتعامل مع POST بيانات التسجيل
            - استلام بيانات: email, password, fullname, street, city, postal من req.body
            - إنشاء كائن User جديد وتمرير البيانات له
            - استدعاء دالة signup من كلاس User لحفظ المستخدم في قاعدة البيانات
            - إعادة التوجيه لصفحة تسجيل الدخول بعد التسجيل
            - إنشاء دالة getLogin لعرض صفحة تسجيل الدخول

          - إنشاء ملف user.model.js:
            - تعريف كلاس User مع خصائص: email, password, fullname, address (street, city, postalCode)
            - دالة signup داخل الكلاس تقوم بتشفير كلمة المرور باستخدام bcrypt
            - حفظ بيانات المستخدم في مجموعة 'users' داخل MongoDB


-------------

- إضافة مكتبة الحماية CSRF:
  npm i csurf

- إنشاء مجلد middlewares
- داخل middlewares، إنشاء ملف csrf-token.js يحتوي على:

  function addCsrfToken(req, res, next) {
      res.locals.csrfToken = req.csrfToken();
      next();
  }

  module.exports = addCsrfToken;

- استخدام middleware لإرسال قيمة CSRF token للعرض في القوالب
- إضافة حقول الـ CSRF في نماذج التسجيل وتسجيل الدخول لضمان حماية الريكوست من هجمات التزوير

---------------------


- إنشاء صفحة خاصة لعرض أخطاء السيرفر (500 error):
  - مسار الملف: views/shared/500.ejs
  - تحتوي على رسالة: "Something went wrong" + رابط للصفحة الرئيسية

- إنشاء ملف جديد في middlewares باسم error-handler.js يحتوي على:

  function handleError(err, req, res, next) {
      console.error('Error occurred:', err);
      res.status(500).render('shared/500');
  }

  module.exports = handleError;

- الهدف: عرض صفحة مفيدة للمستخدم عند حدوث خطأ غير متوقع بدلاً من كود الخطأ الخام


--------------

- أضفنا دعم الجلسات (Sessions) والكوكيز لأن مكتبة CSRF تعتمد عليهم.
- قمنا بتثبيت البكجات:
  npm i express-session connect-mongodb-session

- أنشأنا ملف جديد: config/session.js
  يحتوي على:
  - createSessionStore: لإنشاء store من نوع MongoDB لتخزين الجلسات.
  - createSessionConfig: إعدادات السيشن (السر، زمن الانتهاء، store).

  مثال:
  {
    secret: 'super-secret',
    resave: false,
    saveUninitialized: false,
    store: MongoDBStore,
    cookie: { maxAge: يومين }
  }

- في ملف app.js:
  - استوردنا createSessionConfig
  - مررنا الناتج إلى express-session:

  ```js
  const sessionConfig = createSessionConfig();
  app.use(expressSession(sessionConfig));




        ======================== Day 82 =================



 
 إنشاء جلسة بعد تسجيل الدخول
 
 في auth.controller.js أضفنا دالة login:
async function login(req, res) {
  const user = new User(req.body.email, req.body.password);
  const existingUser = await user.getUserWithSameEmail();

  if (!existingUser) {
    res.redirect('/login');
    return;
  }

  const passwordIsCorrect = await user.hasMatchingPassword(req.body.password);
  if (!passwordIsCorrect) {
    res.redirect('/login');
    return;
  }

  authUtil.createUserSession(req, existingUser, function () {
    res.redirect('/');
  });
}

الهدف: بعد ما يتأكد من الإيميل وكلمة السر، يتم إنشاء جلسة Session للمستخدم وتخزين الـ user._id بداخلها.


--------------
أنشأنا ملف util/authentication.js يحتوي

function createUserSession(req, user, action) {
  req.session.uid = user._id.toString(); // تخزين ID المستخدم داخل الجلسة
  req.session.save(action); // بعد تخزين الجلسة بنجاح، بننفذ الكول باك
}

module.exports = {
  createUserSession
};


 التحقق من كلمة السر + إضافة زر Logout
داخل صفحة تسجيل الدخول، صار التحقق يتم عن طريق مقارنة كلمة السر المُدخلة مع كلمة السر المخزنة (بعد فك تشفيرها باستخدام bcrypt).

زر تسجيل الخروج (Logout):
أضفنا زر أو رابط يسمح للمستخدم بتسجيل الخروج، لاحقاً راح نربطه بدالة تحذف الجلسة.


شيكنا على الايميل والباسورد وكل. اشي بحطو اليوزر داخل signup
وشيكنا علي انو الايميل والكنفويرم ايميل زي بعض قبل ما نرسل للداتا بيس 
وشيكنا انو الايميل مش مخزن  زيه بالداتا بيس 



//////////
الفرق بين res.render & res.redirect

res.render ما بتطلب صفحة جديده من السيرفر وبالتالي بتحتفظ بالبيانات وبتقدر ترجع تعرضهم في حال كان كاتب ايميل او باسورد غلط 
res.redirect بطلب صفحة جديدة كاملة من السيرفر ولو تفتح النتورك تاب بتلاقي ضربتين وحدة بوست و وحدة جت 


 ======================== Day 83 =================

 تخزين البيانات التي يدخلها المستخدم مؤقتا بالسيشن لاعادة استخدامها في حال قام بوضع ايميل او باسورد خطا ليبقى يظهر امامه 
 function getSessionData(){
const sessionData = req.session.flashedData;

req.session.flashedData = null;
return sessionData;
}


function flashDataToSession(req, data, action) {
    req.session.flashedData = data;
    req.session.save(action); 
}

module.exports = {
    getSessionData,
    flashDataToSession
}

اظهار رسالة خطأ وعمل validation صحيح علي التسجيل والدخول
عمل ستايل لرسالة الخطأ 
اضافة isAdmin علي المستخدمين الادمن 
اظهار واخفاء اجزاء من المنيو بناءا على الرولز تاعت المستخدم ادمن او لا 
تعديل ستايل الهيدر واضافة كبسة همبورغير في ستايلات الموبايل 



 ======================== Day 84 =================


- جعلنا تصميم الموقع متجاوب (Responsive) ليتناسب مع الشاشات الصغيرة والكبيرة.
- عدلنا تصميم الهيدر وأضفنا زر يظهر فقط على الشاشات الصغيرة لعرض/إخفاء قائمة التنقل.
- استخدمنا JavaScript لجعل الزر يتحكم بإظهار أو إخفاء القائمة عند الضغط.
- أضفنا فورم لإضافة منتج جديد في صفحات الأدمن، يسمح برفع صورة مع المنتج.

Image Upload Middleware Summary:
- استخدمنا مكتبة multer للتعامل مع رفع الملفات في Express.
- استوردنا uuid.v4 لتوليد أسماء فريدة للصور المرفوعة.
- إعداد multer:
  - destination: تخزين الصور في المجلد "product-data/images".
  - filename: توليد اسم جديد باستخدام UUID + اسم الملف الأصلي لتفادي التكرار.
- أنشأنا middleware باسم configuredMulterMiddleware باستخدام upload.single('image') للتعامل مع صورة واحدة.
- صدّرنا الـ middleware لاستخدامه في الراوتات الخاصة برفع الصور.
- ملاحظات:
  - يجب التأكد من وجود مجلد "product-data/images" في جذر المشروع.
  - يُفضل استخدام path.join مع __dirname لتحديد مسار التخزين بشكل آمن.



 ======================== Day 85 =================


- إنشاء ملف product.model.js لتخزين المنتجات في قاعدة البيانات.
  - الكلاس Product يحتوي على:
    - title, summary, price, description, image
    - imagePath: مسار الصورة داخل السيرفر
    - imageUrl: مسار عرض الصورة داخل المتصفح
  - دالة save تحفظ بيانات المنتج في مجموعة 'products'

- في ملف الميدلوير، أنشأنا دالة createNewProduct:
  - تستقبل البيانات من الفورم بما فيها اسم الصورة
  - تنشئ كائن من كلاس Product
  - تحفظه في قاعدة البيانات
  - في حال حدوث خطأ، يتم تمريره للميدلوير الخاص بالأخطاء
  - بعد الحفظ، يتم إعادة التوجيه لصفحة جميع المنتجات

- إنشاء صفحة EJS جديدة لعرض كل المنتجات داخل صفحة الأدمن:
  - تحتوي على زر "Create New Product"
  - لكل منتج يتم عرض:
    - صورة المنتج
    - الاسم
    - رابط لتعديل المنتج
    - زر للحذف

- في ملف app.js:
  - استخدمنا express.static لخدمة الصور من مجلد product-data:
    ```js
    app.use('/products/assets', express.static('product-data'));
    ```





 ======================== Day 86 =================



Day 86

- تجهيز partial لعرض تفاصيل المنتج داخل صفحة الأدمن (product-item.ejs):
  - يحتوي على:
    - صورة المنتج
    - عنوان المنتج
    - زر View & Edit
    - زر Delete

- استخدام هذا القالب داخل صفحة "All Products" باستخدام `for...of` loop لريندر كل منتج من قاعدة البيانات.

- تصميم العنصر باستخدام CSS داخل ملف product.css:
  - `.product-item`: يحتوي على تصميم الكرت، لون الخلفية، بوردر راوند، وoverflow
  - `#product-grid`: يستخدم Grid لعرض المنتجات بشكل متجاوب
  - `img`: لضبط حجم الصورة وتغطية المساحة (object-fit: cover)
  - `.product-item-content`: يحتوي على عنوان المنتج وأزرار العمليات
  - `.product-item-actions`: يستخدم Flexbox لترتيب الأزرار بمسافة مناسبة

- الهدف: عرض المنتجات بشكل واضح ومنظم في صفحة الأدمن مع إمكانية الدخول لتعديلها أو حذفها.

- تجهيز صفحة تعديل المنتج (update-product.ejs):
  - تحتوي على نفس تصميم صفحة إنشاء المنتج.
  - إعادة استخدام الفورم نفسه من خلال تمرير `submitPath` و `product` كـ parameters.
  - الاستفادة من include للقالب المشترك: product-form.ejs.

- إنشاء ملف product-form.ejs الذي يحتوي على:
  - فورم إرسال البيانات باستخدام method POST و enctype للمرفقات.
  - الحقول: العنوان، الصورة (image)، الملخص (summary)، السعر (price)، والوصف (description).
  - زر Reset و Submit.
  - في حالة التعديل يتم تمرير قيم حقيقية داخل الحقول.
  - في حالة الإنشاء يتم تمرير قيم فاضية.

- إرسال بيانات التعديل باستخدام:
  `submitPath: "/admin/products/" + product.id`

- إرسال بيانات الإنشاء باستخدام:
  `submitPath: "/admin/products"` مع قيم فاضية.

- في admin.controller:
  - دالة `getUpdateProduct`: تجلب بيانات منتج معين من قاعدة البيانات باستخدام ID وتعرض صفحة التعديل.
  - دالة `updateProduct`: لم يتم تنفيذها بعد ولكن ستكون مسؤولة عن تحديث بيانات المنتج داخل قاعدة البيانات.





 ======================== Day 87 =================

- النتيجة: يمكن للمشرف الآن معاينة الصورة قبل رفعها، وحذف المنتجات مباشرة من لوحة الإدارة.

- إضافة خاصية معاينة الصورة قبل رفعها (Image Preview):
  - أنشأنا سكربت جافاسكربت:
    - تحديد input الصورة ووسم img للمعاينة.
    - عند اختيار صورة، يتم عرضها فورًا باستخدام `URL.createObjectURL`.
    - في حال عدم وجود صورة يتم إخفاء المعاينة.
  - أضفنا Event Listener على التغيير (change) في input.

- إضافة ستايل لـ image preview:
  - `#image-upload-control` لاحتواء العناصر وتنسيقها عموديًا.
  - تحديد حجم input.
  - جعل الصورة بحجم 4rem مع border-radius وobject-fit: cover.
  - بشكل افتراضي الصورة مخفية حتى يتم اختيار واحدة.

- إضافة ميزة حذف منتج (Delete Product):
  - في `admin.controller.js`:
    - أنشأنا دالة `deleteProduct` لجلب المنتج حسب ID، ثم حذف المنتج من قاعدة البيانات.
  - في `product.model.js`:
    - أضفنا دالة `remove` تستخدم `deleteOne` لحذف المنتج بناءً على الـ ID.
  - في ملف الراوت:
    - أضفنا الراوت:
      ```js
      router.delete('/products/:id', adminController.deleteProduct);
      ```

- النتيجة: يمكن للمشرف الآن معاينة الصورة قبل رفعها، وحذف المنتجات مباشرة من لوحة الإدارة.

<!-- لكل زر حذف منتج، أضف الـ product id والـ csrf token -->
<button class="btn btn-alt" 
        data-productid="<%= product.id %>" 
        data-csrf="<%= locals.csrfToken %>">Delete</button>
        