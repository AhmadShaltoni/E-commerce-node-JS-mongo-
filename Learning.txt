Day 78 - Project Initialization and Planning

- تم إنشاء المشروع باستخدام: npm init -y
- من خلال الدورة، تم استخدام بنية MVC
- الفولدرات الأساسية:
  - controllers
  - models
  - views
  - routes
- صفحات views المشتركة (admin + customer):
  - Signup
  - Login
- صفحات خاصة بـ admin:
  - Dashboard
  - All Products
  - New Product
  - Update Product
  - All Orders
- صفحات خاصة بـ customer:
  - All Products
  - Product Details
  - Shopping Cart
  - Customer Orders
- تصميم models:
  - User:
    - email, password, name, address, isAdmin
  - Product:
    - name, summary, price, image, description
  - Cart:
    - items, totalPrice, numberOfItems
  - Order:
    - userData, products or cart, date, status

    * بعد هيك قمنا بتثبيت مكتبات بنحتاجها مثل
-  express ، nodemon (لتحديث السيرفر تلقائيًا في وضع التطوير)



- في app.js:
  - استدعاء express
  - إنشاء app باستخدام express()
  - تشغيل السيرفر على البورت 3000 باستخدام app.listen

- داخل routes:
  - إنشاء ملف: auth.route.js
  - يحتوي على الراوتات الخاصة بـ signup و login
  - لكل راوت (get أو post)، يتم تحديد اسم دالة فقط

- داخل controllers:
  - إنشاء ملف: auth.controller.js
  - يحتوي على الدوال الفعلية الخاصة بـ signup و login
  - يتم تمرير أسماء هذه الدوال من الراوتس



======================== Day 79 =================


- تم تثبيت EJS باستخدام: npm i ejs

- داخل app.js:
  - const express = require('express')
  - const path = require('path')
  - const authRouter = require('./routes/auth.routes')
  - const app = express()
  - تعيين EJS كمحرك عرض: app.set('view engine', 'ejs')
  - تحديد مسار مجلد views: app.set('views', path.join(__dirname, 'views'))
  - استخدام الراوتر: app.use(authRouter)
  - تشغيل السيرفر على بورت 3000: app.listen(3000)
  -app.use(express.static('public')) تعريف السيرفر على ملف الستايل 


- داخل مجلد views:
  - إنشاء مجلد باسم auth
  - إضافة الصفحات:
    - login.ejs
    - signup.ejs

- داخل views/customer:
  - إنشاء مجلد باسم includes
  - إضافة ملفات مشتركة:
    - head.ejs
    - header.ejs

- إنشاء مجلد باسم public
  - إضافة ملفات CSS داخله

- في ملفات الستايل:
  - تم ربط Google Fonts داخل head.ejs
  - تعريف ستايل أساسي يتم تطبيقه على كل الصفحات من خلال ملف رئيسي

- في CSS:
  - استخدام المتغيرات (CSS Variables)
  - تعريف متغيرات للألوان، المساحات (spacing)، والـ shadow



======================== Day 80 =================


- داخل مجلد public:
  - إضافة ملف CSS جديد باسم base.css
  - استخدامه لتنسيق العناصر العامة في المشروع

- التنسيقات اللي أضفناها:

  main {
      width: 90%;
      max-width: 50rem;
      margin: auto;
  }

  ul, ol {
      list-style: none;
      margin: 0;
      padding: 0;
  }

  a {
      text-decoration: none;
      color: var(--color-primary-400);
  }

  .btn {
      cursor: pointer;
      font: inherit;
      padding: var(--space-2) var(--space-6);
      background-color: var(--color-primary-500);
      color: var(--color-primary-200-contrast);
      border: 1px solid var(--color-primary-500);
      border-radius: var(--border-radius-small);
  }

  .btn:hover,
  .btn:active {
      background-color: var(--color-primary-700);
      border-color: var(--color-primary-700);
  }

------------------

- تم إضافة تنسيقات خاصة بعناصر الفورم:

  form hr {
      border-color: var(--color-primary-200);
      margin: var(--space-4);
  }

  label {
      display: block;
      margin-bottom: var(--space-2);
      color: var(--color-gray-100);
  }

  input, textarea {
      font: inherit;
      width: 90%;
      padding: var(--space-2);
      border-radius: var(--border-radius-small);
      border: none;
      background-color: var(--color-gray-500);
      color: var(--color-gray-100);
  }

----------------


- داخل auth.controller.js:
  - إضافة دالة جديدة: signupPost (تعالج POST request الخاصة بـ signup)

- داخل auth.routes.js:
  - إضافة route من نوع POST لصفحة signup
  - تمرير الدالة signupPost من الكنترولر

- إعداد قاعدة البيانات:
  - تثبيت MongoDB: npm i mongodb
  - إنشاء مجلد باسم data
  - داخل data: إنشاء ملف database.js

- محتوى ملف database.js:

  const mongodb = require('mongodb');
  const MongoClient = mongodb.MongoClient;
  let database;

  async function connectToDatabase() {
      const client = await MongoClient.connect('mongodb://localhost:27017');
      database = client.db('online-shop');
  }

  function getDb() {
      if (!database) {
          throw new Error('Database not initialized. Call connectToDatabase first.');
      }
      return database;
  }

  module.exports = {
      connectToDatabase,
      getDb
  };

- داخل app.js:
  - استدعاء ملف قاعدة البيانات:
    const db = require('./data/database')

  - التأكد من الاتصال بقاعدة البيانات قبل تشغيل السيرفر:

    db.connectToDatabase()
        .then(() => {
            app.listen(3000, () => {
                console.log('Server is running on port 3000');
            });
        })
        .catch(err => {
            console.error('Failed to connect to the database:', err);
        });